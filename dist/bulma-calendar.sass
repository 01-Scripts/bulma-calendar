$calendar-border: none !default
$calendar-border-radius: $radius-small !default
$calendar-header-background-color: $primary !default
$calendar-days-background-color: transparent !default
$calendar-header-days-color: $grey-light !default
$calendar-date-color: $text !default
$calendar-date-hover-background-color: $white-ter !default
$calendar-today-background: transparent !default
$calendar-today-border-color: $primary !default
$calendar-today-color: $primary !default
$calendar-range-background-color: lighten($primary, 50%) !default
$calendar-body-padding: 0 1em 1em 1em !default
$calendar-header-padding: 1em 1em 0 1em !default
$calendar-header-nav-padding: .5em !default
$calendar-date-padding: .4rem 0 !default

=css3-prefix($property, $value)
  -webkit-#{$property}: #{$value}
  -khtml-#{$property}: #{$value}
  -moz-#{$property}: #{$value}
  -ms-#{$property}: #{$value}
  -o-#{$property}: #{$value}
  #{$property}: #{$value}

=calendar
  .calendar
    background: $white
    border: $calendar-border
    border-radius: $calendar-border-radius
    display: block
    min-width: 20rem
    text-align: center
    max-width: 20rem
    &.is-active
      display: initial
    .calendar-nav
      background: $calendar-header-background-color
      color: $white
      border-top-left-radius: $radius-small
      border-top-right-radius: $radius-small
      display: flex
      align-items: center
      justify-content: space-between
      font-size: $size-5
      padding: $calendar-header-nav-padding
      .calendar-nav-month,
      .calendar-nav-day,
      .calendar-nav-year
        width: 100%
        display: flex
        justify-content: space-between
      .calendar-month,
      .calendar-day,
      .calendar-year
        flex: 1
      .calendar-month
        font-size: $size-4
      .calendar-day
        font-size: $size-2
      .calendar-nav-previous-month, .calendar-nav-next-month,
      .calendar-nav-previous-year, .calendar-nav-next-year,
        flex-basis: auto
        flex-grow: 0
        flex-shrink: 0
        .button
          text-decoration: none
          color: $white
          &:hover
            background: transparent
            color: $white-ter
      .calendar-nav-left
        align-items: center
        justify-content: flex-start
      .calendar-nav-right
        align-items: center
        justify-content: flex-end
    .calendar-header, .calendar-body
      display: flex
      flex-wrap: wrap
      justify-content: center
    .calendar-header .calendar-date, .calendar-body .calendar-date
      flex: 0 0 14.28%
      max-width: 14.28%
    .calendar-header
      padding: $calendar-header-padding
      background: $calendar-days-background-color
      color: findColorInvert( $calendar-days-background-color )
      font-size: $size-7
      .calendar-date
        color: $calendar-header-days-color
    .calendar-body
      padding: $calendar-body-padding
      color: $grey
    .calendar-date
      border: 0
      padding: $calendar-date-padding
      .date-item
        appearance: none
        background: transparent
        border: .1rem solid transparent
        border-radius: 100%
        color: $calendar-date-color
        cursor: pointer
        height: 2.2rem
        line-height: 1.4rem
        outline: none
        padding: .3rem
        position: relative
        text-align: center
        text-decoration: none
        transition: all .2s ease
        vertical-align: middle
        white-space: nowrap
        width: 2.2rem
        &.is-today
          background: $calendar-today-background
          border-color: $calendar-today-border-color
          color: $calendar-today-color
        &:focus
          background: $calendar-date-hover-background-color
          border-color: $calendar-date-hover-background-color
          color: findColorInvert( $calendar-date-hover-background-color )
          text-decoration: none
        &:hover
          background: $calendar-date-hover-background-color
          border-color: $calendar-date-hover-background-color
          color: findColorInvert( $calendar-date-hover-background-color )
          text-decoration: none
        &.is-active
          background: $primary
          border-color: $primary
          color: findColorInvert( $primary )
      &.is-disabled,
      &[disabled]
        .date-item, .calendar-event
          cursor: default
          opacity: .25
          pointer-events: none
    .calendar-range
      position: relative
      &::before
        background: $calendar-range-background-color
        content: ""
        height: 2.2rem
        left: 0
        position: absolute
        right: 0
        top: 50%
        transform: translateY(-50%)
      &.calendar-range-start::before
        left: 50%
      &.calendar-range-end::before
        right: 50%
      .date-item
        color: $primary

    &.is-large
      max-width: 100%
      .calendar-body
        .calendar-date
          border-bottom: $calendar-border
          border-right: $calendar-border
          display: flex
          flex-direction: column
          height: 11rem
          padding: 0
          &:nth-child(7n)
            border-right: 0
          &:nth-last-child(-n+7)
            border-bottom: 0
      .date-item
        align-self: flex-end
        height: 2.2rem
        margin-right: .5rem
        margin-top: .5rem
      .calendar-range
        &::before
          top: 1.9rem
        &.calendar-range-start::before
          left: auto
          width: 1.9rem
        &.calendar-range-end::before
          right: 1.9rem
      .calendar-events
        flex-grow: 1
        line-height: 1
        overflow-y: auto
        padding: .5rem
      .calendar-event
        background-color: $grey
        border-radius: $radius-small
        color: $white
        display: block
        font-size: 1rem
        margin: .2rem auto
        overflow: hidden
        padding: .3rem .4rem
        text-align: left
        text-overflow: ellipsis
        vertical-align: baseline
        white-space: nowrap
        @each $name, $pair in $colors
          $color: nth($pair, 1)
          $color-invert: nth($pair, 2)
          &.is-#{$name}
            background-color: $color
            color: $color-invert

.datepicker
  display: none
  &.is-active
    display: flex
    .calendar
      position: fixed
      z-index: 40
      min-width: 20rem
      max-width: 20rem
      position: relative
      margin: 0 auto
      max-height: calc(100vh - 40px)
    .calendar-nav
      flex-direction: column
  +calendar

+calendar
termine click event depending on if we are on Touch device or not
    this._clickEvent = ('ontouchstart' in window) ? 'touchstart' : 'click';

    this.element = typeof selector === 'string' ? document.querySelector(selector) : selector;
    // An invalid selector or non-DOM node has been provided.
    if (!this.element) {
      throw new Error('An invalid selector or non-DOM node has been provided.');
    }

    /// Set default options and merge with instance defined
    this.options = Object.assign({}, {
      startDate: new Date(),
      dateFormat: 'yyyy-mm-dd', // the default data format `field` value
      lang: 'en', // internationalization
      overlay: false,
      closeOnOverlayClick: true,
      closeOnSelect: true,
      // callback functions
      onSelect: null,
      onOpen: null,
      onClose: null,
      onRender: null
    }, options);

    // Initiate plugin
    this._init();
  }

  /**
   * Initiate plugin instance
   * @method _init
   * @return {DatePicker} Current plugin instance
   */
  _init() {
    this._id = 'datePicker' + (new Date()).getTime() + Math.floor(Math.random() * Math.floor(9999));
    this.lang = typeof datepicker_langs[this.lang] !== 'undefined' ? this.lang : 'en';
    // Set the startDate to the input value
    if (this.element.value) {
      this.options.startDate = new Date(this.element.value);
    }
    // Transform date format according to dateFormat option
    this.options.startDate = new Date(this._getFormatedDate(this.options.startDate, this.options.dateFormat));
    this.month = this.options.startDate.getMonth();
    this.year = this.options.startDate.getFullYear();
    this.day = this.options.startDate.getDate();
    this.open = false;

    this._build();
    this._bindEvents();

    return this;
  }

  /**
   * Build DatePicker HTML component and append it to the DOM
   * @method _build
   * @return {DatePicker} Current plugin instance
   */
  _build() {
    // Define DatePicker Template
    const datePicker = `
      <div id='${this._id}' class="datepicker ${this.options.overlay ? 'modal' : ''}">
        ${this.options.overlay ? '<div class="modal-background"></div>' : ''}
        <div class="calendar">
          <div class="calendar-nav">
            <div class="calendar-nav-month">
              <div class="calendar-nav-previous-month">
                <button class="button is-small is-text">
                  <i class="fa fa-chevron-left"></i>
                </button>
              </div>
              <div class="calendar-month">${datepicker_langs[this.options.lang].months[this.month]}</div>
              <div class="calendar-nav-next-month">
                <button class="button is-small is-text">
                  <i class="fa fa-chevron-right"></i>
                </button>
              </div>
            </div>
            <div class="calendar-nav-day">
              <div class="calendar-day">${this.day}</div>
            </div>
            <div class="calendar-nav-year">
              <div class="calendar-nav-previous-year">
                <button class="button is-small is-text">
                  <i class="fa fa-chevron-left"></i>
                </button>
              </div>
              <div class="calendar-year">${this.year}</div>
              <div class="calendar-nav-next-year">
                <button class="button is-small is-text">
                  <i class="fa fa-chevron-right"></i>
                </button>
              </div>
            </div>
          </div>
          <div class="calendar-container">
            <div class="calendar-header">
              <div class="calendar-date">${this._getDayName(0, true)}</div>
              <div class="calendar-date">${this._getDayName(1, true)}</div>
              <div class="calendar-date">${this._getDayName(2, true)}</div>
              <div class="calendar-date">${this._getDayName(3, true)}</div>
              <div class="calendar-date">${this._getDayName(4, true)}</div>
              <div class="calendar-date">${this._getDayName(5, true)}</div>
              <div class="calendar-date">${this._getDayName(6, true)}</div>
            </div>
            <div class="calendar-body"></div>
          </div>
        </div>
      </div>
    `;

    // Add datepicker HTML element to Document Body
    document.body.insertAdjacentHTML('beforeend', datePicker);

    // Save pointer to each DatePicker element for later use
    this.datePickerContainer = document.getElementById(this._id);
    this.datePickerCalendar = this.datePickerContainer.querySelector('.calendar');
    if (this.options.overlay) {
      this.datePickerOverlay = this.datePickerContainer.querySelector('.modal-background');
      this.datePickerCloseButton = this.datePickerContainer.querySelector('.modal-close');
    }
    this.datePickerCalendarNav = this.datePickerCalendar.querySelector('.calendar-nav');
    this.datePickerCalendarNavMonth = this.datePickerCalendar.querySelector('.calendar-month');
    this.datePickerCalendarNavYear = this.datePickerCalendar.querySelector('.calendar-year');
    this.datePickerCalendarNavDay = this.datePickerCalendar.querySelector('.calendar-day');
    this.datePickerCalendarNavPreviousMonth = this.datePickerCalendarNav.querySelector('.calendar-nav-previous-month');
    this.datePickerCalendarNavNextMonth = this.datePickerCalendarNav.querySelector('.calendar-nav-next-month');
    this.datePickerCalendarNavPreviousYear = this.datePickerCalendarNav.querySelector('.calendar-nav-previous-year');
    this.datePickerCalendarNavNextYear = this.datePickerCalendarNav.querySelector('.calendar-nav-next-year');
    this.datePickerCalendarHeader = this.datePickerCalendar.querySelector('.calendar-header');
    this.datePickerCalendarBody = this.datePickerCalendar.querySelector('.calendar-body');
  }

  /**
   * Bind all events
   * @method _bindEvents
   * @return {void}
   */
  _bindEvents() {
    // Bind event to element in order to display/hide DatePicker on click
    this.element.addEventListener(this._clickEvent, (e) => {
      e.preventDefault();

      if (this.open) {
        this.hide();
      } else {
        this.show();
      }
    });

    if (this.options.overlay) {
      // Bind close event on Close button
      if (this.datePickerCloseButton) {
        this.datePickerCloseButton.addEventListener(this._clickEvent, (e) => {
          e.preventDefault();
          this.hide();
        });
      }
      // Bind close event on overlay based on options
      if (this.options.closeOnOverlayClick) {
        this.datePickerOverlay.addEventListener(this._clickEvent, (e) => {
          e.preventDefault();
          this.hide();
        });
      }
    }

    // Bind year navigation events
    this.datePickerCalendarNavPreviousYear.addEventListener(this._clickEvent, (e) => {
      e.preventDefault();
      this.prevYear();
    });
    this.datePickerCalendarNavNextYear.addEventListener(this._clickEvent, (e) => {
      e.preventDefault();
      this.nextYear();
    });

    // Bind month navigation events
    this.datePickerCalendarNavPreviousMonth.addEventListener(this._clickEvent, (e) => {
      e.preventDefault();
      this.prevMonth();
    });
    this.datePickerCalendarNavNextMonth.addEventListener(this._clickEvent, (e) => {
      e.preventDefault();
      this.nextMonth();
    });
  }

  /**
   * Bind events on each Day item
   * @method _bindDaysEvents
   * @return {void}
   */
  _bindDaysEvents() {
    [].forEach.call(this.datePickerCalendarDays, (calendarDay) => {
      calendarDay.addEventListener(this._clickEvent, (e) => {
        e.preventDefault();
        if (typeof this.options.onSelect != 'undefined' &&
          this.options.onSelect != null &&
          this.options.onSelect) {
          this.options.onSelect(new Date(year, month, day));
        }
        let date = e.currentTarget.dataset.date.split('-');
        this.element.value = this._getFormatedDate((new Date(date[0], date[1], date[2])), this.options.dateFormat);
        if (this.options.closeOnSelect) {
          this.hide();
        }
      });
    });
  }

  /**
   * Get localized day name
   * @method renderDayName
   * @param  {[type]}      day          [description]
   * @param  {Boolean}     [abbr=false] [description]
   * @return {[type]}                   [description]
   */
  _getDayName(day, abbr = false) {
    day += datepicker_langs[this.options.lang].weekStart;
    while (day >= 7) {
      day -= 7;
    }

    return abbr ? datepicker_langs[this.options.lang].weekdaysShort[day] : datepicker_langs[this.options.lang].weekdays[day];
  }

  _renderDay(day, month, year, isSelected, isToday, isDisabled, isEmpty, isBetween, isSelectedIn, isSelectedOut) {
    return `
      <div data-date="${`${year}-${month}-${day}`}" class="calendar-date${isDisabled ? ' is-disabled' : ''}${isBetween ? ' calendar-range' : ''}${isSelectedIn ? ' calendar-range-start' : ''}${isSelectedOut ? ' calendar-range-end' : ''}">
        <button class="date-item${isToday ? ' is-today' : ''}${isSelected ? ' is-active' : ''}">${day}</button>
      </div>
    `;
  }

  _renderDays() {
    const now = new Date();
    let days = '';

    let numberOfDays = this._getDaysInMonth(this.year, this.month),
      before = new Date(this.year, this.month, 1).getDay();

    // Call onRender callback if defined
    if (typeof this.options.onRender != 'undefined' &&
      this.options.onRender != null &&
      this.options.onRender) {
      this.options.onRender(this);
    }

    // Get start day from options
    if (datepicker_langs[this.options.lang].weekStart > 0) {
      before -= datepicker_langs[this.options.lang].weekStart;
      if (before < 0) {
        before += 7;
      }
    }

    let cells = numberOfDays + before,
      after = cells;
    while (after > 7) {
      after -= 7;
    }

    cells += 7 - after;
    for (var i = 0; i < cells; i++) {
      var day = new Date(this.year, this.month, 1 + (i - before)),
        isBetween = false,
        isSelected = this._compareDates(day, this.options.startDate),
        isSelectedIn = false,
        isSelectedOut = false,
        isToday = this._compareDates(day, now),
        isEmpty = i < before || i >= (numberOfDays + before),
        isDisabled = false;

      if (!isSelected) {
        isSelectedIn = false;
        isSelectedOut = false;
      }

      if (day.getMonth() !== this.month) {
        isDisabled = true;
      }

      days += this._renderDay(day.getDate(), this.month, this.year, isSelected, isToday, isDisabled, isEmpty, isBetween, isSelectedIn, isSelectedOut);
    }

    this.datePickerCalendarBody.insertAdjacentHTML('beforeend', days);
    this.datePickerCalendarDays = this.datePickerCalendarBody.querySelectorAll('.calendar-date');
    this._bindDaysEvents();
  }

  /**
   * Navigate to the previous month and regenerate calendar
   * @method prevMonth
   * @return {void}
   */
  prevMonth() {
    this.month -= 1;
    this._adjustCalendar();
  }

  /**
   * Navigate to the next month and regenerate calendar
   * @method nextMonth
   * @return {}
   */
  nextMonth() {
    this.month += 1;
    this._adjustCalendar();
  }

  /**
   * Navigate to the previous year and regenerate calendar
   * @method prevYear
   * @return {void}
   */
  prevYear() {
    this.year -= 1;
    this._adjustCalendar();
  }

  /**
   * Navigate to the previous year and regenerate calendar
   * @method nextYear
   * @return {}
   */
  nextYear() {
    this.year += 1;
    this._adjustCalendar();
  }

  /**
   * Show DatePicker HTML Component
   * @method show
   * @return {void}
   */
  show() {
    // Set the startDate to the input value
    if (this.element.value) {
      this.options.startDate = new Date(this.element.value);
    }
    this.month = this.options.startDate.getMonth();
    this.year = this.options.startDate.getFullYear();
    this.day = this.options.startDate.getDate();
    this._adjustCalendar();

    if (typeof this.options.onOpen != 'undefined' &&
      this.options.onOpen != null &&
      this.options.onOpen) {
      this.options.onOpen(this);
    }

    this.datePickerContainer.classList.add('is-active');
    if (!this.options.overlay) {
      this._adjustPosition();
    }
    this.open = true;
  }

  /**
   * Hide DatePicker HTML Component
   * @method hide
   * @return {void}
   */
  hide() {
    this.open = false;
    if (typeof this.options.onClose != 'undefined' &&
      this.options.onClose != null &&
      this.options.onClose) {
      this.options.onClose(this);
    }
    this.datePickerContainer.classList.remove('is-active');
  }

  _adjustCalendar() {
    if (this.month < 0) {
      this.year -= Math.ceil(Math.abs(this.month) / 12);
      this.month += 12;
    }
    if (this.month > 11) {
      this.year += Math.floor(Math.abs(this.month) / 12);
      this.month -= 12;
    }
    this.datePickerCalendarNavMonth.innerHTML = datepicker_langs[this.options.lang].months[this.month];
    this.datePickerCalendarNavYear.innerHTML = this.year;
    this.datePickerCalendarNavDay.innerHTML = this.day;
    this.datePickerCalendarBody.innerHTML = '';
    this._renderDays();
    return this;
  }

  /**
   * Recalculate calendar position
   * @method _adjustPosition
   * @return {void}
   */
  _adjustPosition() {
    var width = this.datePickerCalendar.offsetWidth,
      height = this.datePickerCalendar.offsetHeight,
      viewportWidth = window.innerWidth || document.documentElement.clientWidth,
      viewportHeight = window.innerHeight || document.documentElement.clientHeight,
      scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop,
      left, top, clientRect;

    if (typeof this.element.getBoundingClientRect === 'function') {
      clientRect = this.element.getBoundingClientRect();
      left = clientRect.left + window.pageXOffset;
      top = clientRect.bottom + window.pageYOffset;
    } else {
      left = this.element.offsetLeft;
      top = this.element.offsetTop + this.element.offsetHeight;
      while ((this.element = this.element.offsetParent)) {
        left += this.element.offsetLeft;
        top += this.element.offsetTop;
      }
    }

    this.datePickerCalendar.style.position = 'absolute';
    this.datePickerCalendar.style.left = left + 'px';
    this.datePickerCalendar.style.top = top + 'px';
  }

  /**
   * Destroy DatePicker
   * @method destroy
   * @return {[type]} [description]
   */
  destroy() {
    this.datePickerCalendar.remove();
  }

  /**
   * Returns date according to passed format
   * @method _getFormatedDate
   * @param {Date}   dt     Date object
   * @param {String} format Format string
   *      d    - day of month
   *      dd   - 2-digits day of month
   *      D    - day of week
   *      m    - month number
   *      mm   - 2-digits month number
   *      M    - short month name
   *      MM   - full month name
   *      yy   - 2-digits year number
   *      yyyy - 4-digits year number
   */
  _getFormatedDate(dt, format) {
    var items = {
      d: dt.getDate(),
      dd: dt.getDate(),
      D: dt.getDay(),
      m: dt.getMonth() + 1,
      mm: dt.getMonth() + 1,
      M: dt.getMonth(),
      MM: dt.getMonth(),
      yy: dt.getFullYear().toString().substr(-2),
      yyyy: dt.getFullYear()
    };

    items.dd < 10 && (items.dd = '0' + items.dd);
    items.mm < 10 && (items.mm = '0' + items.mm);
    items.D = datepicker_langs[this.options.lang].weekdays[items.D ? items.D - 1 : 6];
    items.M = datepicker_langs[this.options.lang].monthsShort[items.M];
    items.MM = datepicker_langs[this.options.lang].months[items.MM];

    return format.replace(/(?:[dmM]{1,2}|D|yyyy|yy)/g, function(m) {
      return typeof items[m] !== 'undefined' ? items[m] : m;
    });
  }

  /**
   * Check if given year is LeapYear or not
   * @method _isLeapYear
   * @param  {Integer}   year Year to check
   * @return {Boolean}        True if LeapYear then False
   */
  _isLeapYear(year) {
    // solution by Matti Virkkunen: http://stackoverflow.com/a/4881951
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  }

  /**
   * Get the number of days in month
   * @method _getDaysInMonth
   * @param  {Integer}       year  Year to check if we are facing a leapyear or not
   * @param  {Integer}       month Month for which we want to know the amount of days
   * @return {Integer}              Days amount
   */
  _getDaysInMonth(year, month) {
    return [31, this._isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
  }

  /**
   * Compare two dates
   * @method _compareDates
   * @param  {Date}     a First date to compare
   * @param  {Date}     b Second Date to compare with
   * @return {Boolean}    True if dates are equal then false
   */
  _compareDates(a, b) {
    // weak date comparison
    a.setHours(0, 0, 0, 0);
    b.setHours(0, 0, 0, 0);
    return a.getTime() === b.getTime();
  }
}
